# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1I7SNYwG3U1HFIg3T7AwPQhM2k3GDBEl-
"""

!pip install rdflib
!pip install PyDrive

from rdflib import URIRef, BNode, Literal, Namespace, Graph
from rdflib.namespace import Namespace, NamespaceManager
from rdflib.plugins import sparql
from rdflib.namespace import RDF, RDFS, XSD
from rdflib.serializer import Serializer

import requests

# Create an emprty graph
g = Graph()

g.parse('graf1.ttl', format="turtle")
#print (g.serialize(format='n3'))

# Define namespaces
HEALTH_FITNESS = Namespace("http://example.org/health_fitness#")
USDA = Namespace("https://fdc.nal.usda.gov/index.html#")

hasName = URIRef(HEALTH_FITNESS.hasName)
hasProtein = URIRef(HEALTH_FITNESS.hasProtein)
hasEnergy = URIRef(HEALTH_FITNESS.hasEnergy)
hasCarbohydrates = URIRef(HEALTH_FITNESS.hasCarbohydrates)
hasFats = URIRef(HEALTH_FITNESS.hasFats)

# Function to fetch product data from USDA API
def fetch_usda_product_data(api_key, fdc_id):
    url = f"https://api.nal.usda.gov/fdc/v1/food/{fdc_id}?api_key={api_key}"
    response = requests.get(url)

    if response.status_code == 200:
        return response.json()
    else:
        print(f"Error fetching data: {response.status_code}")
        return None

# Function to add product data to ontology
def add_product_to_ontology(product_data):
    fdc_id = product_data['fdcId']
    food_item = URIRef(HEALTH_FITNESS[f"FoodItem_{fdc_id}"])

    g.add((food_item, RDF.type, HEALTH_FITNESS.FoodItem))
    g.add((food_item, hasName, Literal(product_data['description'])))

    # Add nutritional information if available
    nutrients_names = ["Energy (Atwater General Factors)", "Protein", "Carbohydrate, by difference", "Total lipid (fat)"]
    nutrients_data = {nutrients_name: "N/A" for nutrients_name in nutrients_names}
    for nutrient in product_data['foodNutrients']:
        nutrient_name = nutrient['nutrient']['name']
        if nutrient_name in nutrients_names:
            nutrient_value = nutrient['amount']
            nutrients_data[nutrient_name] = nutrient_value

    g.add((food_item, hasEnergy, Literal(f"{nutrients_data[nutrients_names[0]]}")))
    g.add((food_item, hasProtein, Literal(f"{nutrients_data[nutrients_names[1]]}")))
    g.add((food_item, hasCarbohydrates, Literal(f"{nutrients_data[nutrients_names[2]]}")))
    g.add((food_item, hasFats, Literal(f"{nutrients_data[nutrients_names[3]]}")))

# Example usage
api_key = "g7Lw8fOIgGpOycWZCdwwNXLfxrggGQZgZL6ahHFv"  # Replace with your actual USDA API key
fdc_ids = [
    171689, #яблоко
    1105314, #банан
    2646170, #куриная грудка
    746782, #молоко
    748967, #яйцо
    2512381, #рис
    2346403, #картошка
    335240, #хлеб
    2258586, #морковка
    1999634, #помидорка
    169225, #огурец
    747447, #брокколи
    1999633, #шпинат
    2646175, #говядина
    2684441, #лосось
    749420, #свинина/бекон
    172617, #баранина
    171504, #индейка
    2646171, #куриное бедро
    173706, #тунец
    171955, #треска
    2346387, #сметана
    746767, #сыр
    2647437, #йогурт
    1750351, #оливковое масло
    790508, #сливочное масло
    746784, #сахар
    746775, #соль
    332282, #паста
    2261421, #овсянка
    748323, #растительное масло/кукуруза
    2262072, #арахисовое масло
    169640, #мед
    174134, #кофе
    174144, #черный чай
    171917, #зеленый чай
    167587, #конфеты/молочный шоколад
    167749, #лимон
    746771, #апельсин
    2346413, #виноград
    2346409, #клубника
    2346411, #черника
    2346410, #малина
    2346398, #ананас
    169910, #манго
    171706, #авокадо
    2685568, #кабачок
    2258590, #болгарский перец
    790577, #лук
    1104647, #чеснок
    169231, #имбирь
    171320, #корица
    170931, #черный перец
    174278, #соевый соус
    172241, #уксус
    172234, #горчица
    747693, #кетчуп
    167736, #майонез
    ]

for fdc_id in fdc_ids:
    product_data = fetch_usda_product_data(api_key, fdc_id)
    if product_data:
        add_product_to_ontology(product_data)

# Save the updated ontology back to an .owl file
output_file = "updated_health_fitness.owl"
g.serialize(destination=output_file, format='xml')

print(f"Ontology updated and saved to {output_file}")

"""SPARQL запросы:

1. Какие заболевания или состояния могут ограничивать физическую активность, например, какие тренировки запрещены для людей с аритмией или сердечной недостаточности?
"""

# Create an emprty graph
g = Graph()

g.parse('graf1.ttl', format="turtle")

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>

SELECT ?disease ?training
WHERE {
  ?training rdf:type ex:тренировки .
  ?training ex:иметь_ограничения_по_заболеванию ?disease .
  FILTER (?disease IN (ex:аритмия, ex:сердечная_недостаточность))
}

# Для того чтобы запрос работал, ваша онтология должна содержать данные в следующем формате:


## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
## @prefix ex: <http://example.org/health_fitness#> .

# ex:кардио rdf:type ex:тренировки ;
#           ex:иметь_ограничения_по_заболеванию ex:аритмия .

# ex:силовая rdf:type ex:тренировки ;
#            ex:иметь_ограничения_по_заболеванию ex:сердечная_недостаточность .

"""2. Какие упражнения выбирать, если есть ограничение в калорийности на день в
1500 ккал, при этом соответствуя выбранной цели?
"""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>

SELECT ?goal ?training ?calories
WHERE {
  ?goal rdf:type ex:goal .
  ?goal ex:определяет_тренировки ?training .
  ?goal ex:определяет_питание ?calories .
  FILTER (?calories = 1500)
}

# Для того чтобы запрос работал, ваша онтология должна содержать данные в следующем формате:


## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
## @prefix ex: <http://example.org/health_fitness#> .

# ex:похудение rdf:type ex:цель ;
#              ex:определяет_тренировки ex:кардио ;
#              ex:определяет_питание 1500 .

# ex:набор_мышечной_массы rdf:type ex:цель ;
#                         ex:определяет_тренировки ex:силовая ;
#                         ex:определяет_питание 2000 .

"""
3. Как выбрать упражнения в зависимости от целей, таких как похудение, набор массы или поддержание формы?

"""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>

SELECT ?goal ?training
WHERE {
  ?goal rdf:type ex:цель .
  ?goal ex:определяет_тренировки ?training .
  FILTER (?goal IN (ex:похудение, ex:набор_мышечной_массы, ex:повышение_выносливости))
}

# Для того чтобы запрос работал, ваша онтология должна содержать данные в следующем формате:


## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
## @prefix ex: <http://example.org/health_fitness#> .

# ex:похудение rdf:type ex:цель ;
#              ex:определяет_тренировки ex:кардио .

# ex:набор_мышечной_массы rdf:type ex:цель ;
#                         ex:определяет_тренировки ex:силовая .

# ex:поддержание_формы rdf:type ex:цель ;
#                     ex:определяет_тренировки ex:йога .

"""4. Как рассчитать потребление калорий и соотношение белков, жиров и углеводов в рационе для достижения определенной цели?

"""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>

SELECT ?goal ?calories ?proteins ?fats ?carbohydrates
WHERE {
  ?goal rdf:type ex:цель .
  ?goal ex:определяет_питание ?calories .
  ?calories ex:определяет_бжу ?nutrients .
  FILTER (?goal = ex:похудение)
}

# Для того чтобы запрос работал, ваша онтология должна содержать данные в следующем формате:


## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
## @prefix ex: <http://example.org/health_fitness#> .

# ex:похудение rdf:type ex:цель ;
#              ex:определяет_питание ex:калорийность_1500 .

# ex:калорийность_1500 rdf:type ex:калорийность ;
#                      ex:определяет_бжу ex:макронутриенты_похудение .

# ex:макронутриенты_похудение rdf:type ex:макронутриенты ;
#                             ex:количество_белков 75 ;
#                             ex:количество_жиров 30 ;
#                             ex:количество_углеводов 200 .

"""5. Какова оптимальная частота тренировок для достижения определенных целей, таких как похудение, набор массы или поддержание формы?"""

PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>

SELECT ?goal ?frequency
WHERE {
  ?goal rdf:type ex:цель .
  ?goal ex:иметь_количество_тренировок ?frequency .
  FILTER (?goal IN (ex:похудение, ex:набор_мышечной_массы, ex:повышение_выносливости))
}

# Для того чтобы запрос работал, ваша онтология должна содержать данные в следующем формате:

## @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
## @prefix ex: <http://example.org/health_fitness#> .

# ex:похудение rdf:type ex:цель ;
#              ex:иметь_количество_тренировок ex:3_раза_в_неделю .

# ex:набор_мышечной_массы rdf:type ex:цель ;
#                         ex:иметь_количество_тренировок ex:4_раза_в_неделю .

# ex:поддержание_формы rdf:type ex:цель ;
#                     ex:иметь_количество_тренировок ex:3_раза_в_неделю .

from rdflib import Graph, Namespace, URIRef, Literal, RDF

g = Graph()

g.parse('graph2.ttl', format="turtle")

print("QUERY1")
RDF = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS = Namespace("http://www.w3.org/2000/01/rdf-schema#")
EX = Namespace("http://example.org/health_fitness#")

query1 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?training_instance ?deseases
WHERE {
  ?training_type rdfs:subClassOf ex:trainings .
  ?training_instance rdf:type ?training_type .
  ?training_instance ex:иметь_описание_тренировки ?trainings .
  ?training_instance ex:has_constraints_on_deseases ?deseases .
  FILTER (?deseases IN (ex:сердечная_недостаточность, ex:аритмия))
}
"""

results1 = g.query(query1)

# Вывод результатов
for row in results1:
    print(f"training_instance: {row.training_instance}, desease: {row.deseases}")

print()
print("QUERY2")

query2 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?goal ?training ?calories
WHERE {
  ?goal rdf:type ex:goal .
  ?goal ex:определяет_тренировки ?training .
  ?goal ex:определяет_питание ?calories .
  FILTER (?calories = ex:1500)
}
"""
results2 = g.query(query2)

# Вывод результатов
for row in results2:
    print(f"goal: {row.goal}, training: {row.training}, calories: {row.calories}")


print()
print("QUERY3")

query3 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?goal ?training
WHERE {
  ?goal rdf:type ex:goal .
  ?goal ex:определяет_тренировки ?training .
  FILTER (?goal IN (ex:похудение, ex:набор_мышечной_массы, ex:повышение_выносливости))
}
"""
results3 = g.query(query3)

# Вывод результатов
for row in results3:
    print(f"goal: {row.goal}, training: {row.training}")

print()
print("QUERY4")
# TO FIX!!!!
query4 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?цель ?калорийность ?бжу
WHERE {
  ?цель rdf:type ex:цель .
  FILTER (?цель = ex:похудение)
  ?цель ex:определяет_питание ?калорийность .
  ?калорийность ex:определяет_бжу ?бжу .
}
"""
results4 = g.query(query4)

# Вывод результатов
for row in results4:
    print(f"goal: {row.goal}, calories: {row.calories}, proteins: {row.proteins}, fats: {row.fats}, carbohydrates: {row.carbohydrates}")

print()
print("QUERY5")

query5 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ex: <http://example.org/health_fitness#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?goal ?frequency
WHERE {
  ?goal rdf:type ex:goal .
  ?goal ex:has_trainings_count ?frequency .
  FILTER (?goal IN (ex:похудение, ex:набор_мышечной_массы, ex:повышение_выносливости))
}
"""
results5 = g.query(query5)

# Вывод результатов
for row in results5:
    print(f"goal: {row.goal}, training: {row.frequency}")

from rdflib import Graph, Namespace, URIRef, Literal, RDF

g = Graph()

g.parse('last.ttl', format="turtle")

RDF = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
RDFS = Namespace("http://www.w3.org/2000/01/rdf-schema#")
EX = Namespace("http://www.semanticweb.org/alina/ontologies/2024/9/untitled-ontology-13#")

query1 = """
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ex: <http://www.semanticweb.org/alina/ontologies/2024/9/untitled-ontology-13#>
SELECT ?цель ?тренировки ?продолжительность ?частота_тренировки ?калорийность ?содержание_белка ?содержание_жиров ?содержание_углеводов ?заболевания
WHERE {
  ?цель ex:определяет_тренировки ?тренировки .
  ?тренировки ex:иметь_продолжительность ?продолжительность .
  ?цель ex:иметь_количество_тренировок ?частота_тренировки .
  ?цель ex:определяет_питание ?калорийность .
  ?калорийность ex:определяет_белки ?содержание_белка .
?калорийность ex:определяет_жиры ?содержание_жиров .
?калорийность ex:определяет_углеводы ?содержание_углеводов .
  ?тренировки ex:иметь_ограничения_по_заболеванию ?заболевания .
}
"""

results1 = g.query(query1)

with open('output.csv', 'w') as file:
    for row in results1:
        file.write(",".join(row) + "\n")

